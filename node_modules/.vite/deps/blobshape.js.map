{
  "version": 3,
  "sources": ["../../blobshape/index.js"],
  "sourcesContent": ["const generator = ({ size = 400, growth = 6, edges = 6, seed = null } = {}) => {\n  var { destPoints, seedValue } = _createPoints(size, growth, edges, seed);\n  var path = _createSvgPath(destPoints);\n  return { path, seedValue };\n};\n\nconst _toRad = (deg) => deg * (Math.PI / 180.0);\n\nconst _divide = (count) => {\n  var deg = 360 / count;\n\n  return Array(count)\n    .fill(\"a\")\n    .map((_, i) => i * deg);\n};\n\nconst _randomDoubleGenerator = (s) => {\n  var mask = 0xffffffff;\n  var m_w = (123456789 + s) & mask;\n  var m_z = (987654321 - s) & mask;\n\n  return function () {\n    m_z = (36969 * (m_z & 65535) + (m_z >>> 16)) & mask;\n    m_w = (18000 * (m_w & 65535) + (m_w >>> 16)) & mask;\n\n    var result = ((m_z << 16) + (m_w & 65535)) >>> 0;\n    result /= 4294967296;\n    return result;\n  };\n};\n\nconst _magicPoint = (value, min, max) => {\n  let radius = min + value * (max - min);\n  if (radius > max) {\n    radius = radius - min;\n  } else if (radius < min) {\n    radius = radius + min;\n  }\n  return radius;\n};\n\nconst _point = (origin, radius, degree) => {\n  var x = origin + radius * Math.cos(_toRad(degree));\n  var y = origin + radius * Math.sin(_toRad(degree));\n  return [Math.round(x), Math.round(y)];\n};\n\nconst _shuffle = (array) => {\n  array.sort(() => Math.random() - 0.5);\n  return array;\n};\n\nconst _createPoints = (size, minGrowth, edgesCount, seed) => {\n  let outerRad = size / 2;\n  let innerRad = minGrowth * (outerRad / 10);\n  let center = size / 2;\n\n  let slices = _divide(edgesCount);\n  let maxRandomValue = _shuffle([99, 999, 9999, 99999, 999999])[0];\n  let id = Math.floor(Math.random() * maxRandomValue);\n  let seedValue = seed || id;\n  let randVal = _randomDoubleGenerator(seedValue);\n  let destPoints = [];\n\n  slices.forEach((degree) => {\n    let O = _magicPoint(randVal(), innerRad, outerRad);\n    let end = _point(center, O, degree);\n    destPoints.push(end);\n  });\n  return { destPoints, seedValue };\n};\n\nconst _createSvgPath = (points) => {\n  let svgPath = \"\";\n  var mid = [\n    (points[0][0] + points[1][0]) / 2,\n    (points[0][1] + points[1][1]) / 2,\n  ];\n  svgPath += \"M\" + mid[0] + \",\" + mid[1];\n\n  for (var i = 0; i < points.length; i++) {\n    var p1 = points[(i + 1) % points.length];\n    var p2 = points[(i + 2) % points.length];\n    mid = [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2];\n    svgPath += \"Q\" + p1[0] + \",\" + p1[1] + \",\" + mid[0] + \",\" + mid[1];\n  }\n  svgPath += \"Z\";\n  return svgPath;\n};\n\nmodule.exports = generator;\n"],
  "mappings": "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",
  "names": []
}
